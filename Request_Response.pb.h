// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Request_Response.proto

#ifndef PROTOBUF_Request_5fResponse_2eproto__INCLUDED
#define PROTOBUF_Request_5fResponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Request_5fResponse_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsEventImpl();
void InitDefaultsEvent();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsResponseImpl();
void InitDefaultsResponse();
inline void InitDefaults() {
  InitDefaultsEvent();
  InitDefaultsRequest();
  InitDefaultsResponse();
}
}  // namespace protobuf_Request_5fResponse_2eproto
namespace rrepro {
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace rrepro
namespace rrepro {

enum Event_Priority {
  Event_Priority_ONE = 0,
  Event_Priority_TWO = 1,
  Event_Priority_THREE = 2
};
bool Event_Priority_IsValid(int value);
const Event_Priority Event_Priority_Priority_MIN = Event_Priority_ONE;
const Event_Priority Event_Priority_Priority_MAX = Event_Priority_THREE;
const int Event_Priority_Priority_ARRAYSIZE = Event_Priority_Priority_MAX + 1;

const ::google::protobuf::EnumDescriptor* Event_Priority_descriptor();
inline const ::std::string& Event_Priority_Name(Event_Priority value) {
  return ::google::protobuf::internal::NameOfEnum(
    Event_Priority_descriptor(), value);
}
inline bool Event_Priority_Parse(
    const ::std::string& name, Event_Priority* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Event_Priority>(
    Event_Priority_descriptor(), name, value);
}
enum Request_Kind {
  Request_Kind_GET = 0,
  Request_Kind_ADD = 1
};
bool Request_Kind_IsValid(int value);
const Request_Kind Request_Kind_Kind_MIN = Request_Kind_GET;
const Request_Kind Request_Kind_Kind_MAX = Request_Kind_ADD;
const int Request_Kind_Kind_ARRAYSIZE = Request_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Kind_descriptor();
inline const ::std::string& Request_Kind_Name(Request_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Kind_descriptor(), value);
}
inline bool Request_Kind_Parse(
    const ::std::string& name, Request_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Kind>(
    Request_Kind_descriptor(), name, value);
}
enum Response_Kind {
  Response_Kind_OK = 0,
  Response_Kind_BAD = 1
};
bool Response_Kind_IsValid(int value);
const Response_Kind Response_Kind_Kind_MIN = Response_Kind_OK;
const Response_Kind Response_Kind_Kind_MAX = Response_Kind_BAD;
const int Response_Kind_Kind_ARRAYSIZE = Response_Kind_Kind_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_Kind_descriptor();
inline const ::std::string& Response_Kind_Name(Response_Kind value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_Kind_descriptor(), value);
}
inline bool Response_Kind_Parse(
    const ::std::string& name, Response_Kind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_Kind>(
    Response_Kind_descriptor(), name, value);
}
// ===================================================================

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rrepro.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const PROTOBUF_FINAL { return New(NULL); }

  Event* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Event_Priority Priority;
  static const Priority ONE =
    Event_Priority_ONE;
  static const Priority TWO =
    Event_Priority_TWO;
  static const Priority THREE =
    Event_Priority_THREE;
  static inline bool Priority_IsValid(int value) {
    return Event_Priority_IsValid(value);
  }
  static const Priority Priority_MIN =
    Event_Priority_Priority_MIN;
  static const Priority Priority_MAX =
    Event_Priority_Priority_MAX;
  static const int Priority_ARRAYSIZE =
    Event_Priority_Priority_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Priority_descriptor() {
    return Event_Priority_descriptor();
  }
  static inline const ::std::string& Priority_Name(Priority value) {
    return Event_Priority_Name(value);
  }
  static inline bool Priority_Parse(const ::std::string& name,
      Priority* value) {
    return Event_Priority_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string text = 1;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 1;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional int32 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:rrepro.Event)
 private:
  void set_has_text();
  void clear_has_text();
  void set_has_timestamp();
  void clear_has_timestamp();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::int32 timestamp_;
  friend struct ::protobuf_Request_5fResponse_2eproto::TableStruct;
  friend void ::protobuf_Request_5fResponse_2eproto::InitDefaultsEventImpl();
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rrepro.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Request_Kind Kind;
  static const Kind GET =
    Request_Kind_GET;
  static const Kind ADD =
    Request_Kind_ADD;
  static inline bool Kind_IsValid(int value) {
    return Request_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    Request_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    Request_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    Request_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return Request_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return Request_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return Request_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .rrepro.Event event = 3;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 3;
  const ::rrepro::Event& event() const;
  ::rrepro::Event* release_event();
  ::rrepro::Event* mutable_event();
  void set_allocated_event(::rrepro::Event* event);

  // optional .rrepro.Request.Kind kind = 2 [default = GET];
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 2;
  ::rrepro::Request_Kind kind() const;
  void set_kind(::rrepro::Request_Kind value);

  // @@protoc_insertion_point(class_scope:rrepro.Request)
 private:
  void set_has_kind();
  void clear_has_kind();
  void set_has_event();
  void clear_has_event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::rrepro::Event* event_;
  int kind_;
  friend struct ::protobuf_Request_5fResponse_2eproto::TableStruct;
  friend void ::protobuf_Request_5fResponse_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rrepro.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Response_Kind Kind;
  static const Kind OK =
    Response_Kind_OK;
  static const Kind BAD =
    Response_Kind_BAD;
  static inline bool Kind_IsValid(int value) {
    return Response_Kind_IsValid(value);
  }
  static const Kind Kind_MIN =
    Response_Kind_Kind_MIN;
  static const Kind Kind_MAX =
    Response_Kind_Kind_MAX;
  static const int Kind_ARRAYSIZE =
    Response_Kind_Kind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Kind_descriptor() {
    return Response_Kind_descriptor();
  }
  static inline const ::std::string& Kind_Name(Kind value) {
    return Response_Kind_Name(value);
  }
  static inline bool Kind_Parse(const ::std::string& name,
      Kind* value) {
    return Response_Kind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .rrepro.Event events = 4;
  int events_size() const;
  void clear_events();
  static const int kEventsFieldNumber = 4;
  const ::rrepro::Event& events(int index) const;
  ::rrepro::Event* mutable_events(int index);
  ::rrepro::Event* add_events();
  ::google::protobuf::RepeatedPtrField< ::rrepro::Event >*
      mutable_events();
  const ::google::protobuf::RepeatedPtrField< ::rrepro::Event >&
      events() const;

  // optional .rrepro.Response.Kind kind = 2 [default = BAD];
  bool has_kind() const;
  void clear_kind();
  static const int kKindFieldNumber = 2;
  ::rrepro::Response_Kind kind() const;
  void set_kind(::rrepro::Response_Kind value);

  // @@protoc_insertion_point(class_scope:rrepro.Response)
 private:
  void set_has_kind();
  void clear_has_kind();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::rrepro::Event > events_;
  int kind_;
  friend struct ::protobuf_Request_5fResponse_2eproto::TableStruct;
  friend void ::protobuf_Request_5fResponse_2eproto::InitDefaultsResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event

// optional string text = 1;
inline bool Event::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& Event::text() const {
  // @@protoc_insertion_point(field_get:rrepro.Event.text)
  return text_.GetNoArena();
}
inline void Event::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:rrepro.Event.text)
}
#if LANG_CXX11
inline void Event::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:rrepro.Event.text)
}
#endif
inline void Event::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:rrepro.Event.text)
}
inline void Event::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:rrepro.Event.text)
}
inline ::std::string* Event::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:rrepro.Event.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Event::release_text() {
  // @@protoc_insertion_point(field_release:rrepro.Event.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Event::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:rrepro.Event.text)
}

// optional int32 timestamp = 2;
inline bool Event::has_timestamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_timestamp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline ::google::protobuf::int32 Event::timestamp() const {
  // @@protoc_insertion_point(field_get:rrepro.Event.timestamp)
  return timestamp_;
}
inline void Event::set_timestamp(::google::protobuf::int32 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:rrepro.Event.timestamp)
}

// -------------------------------------------------------------------

// Request

// optional .rrepro.Request.Kind kind = 2 [default = GET];
inline bool Request::has_kind() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_kind() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_kind() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_kind() {
  kind_ = 0;
  clear_has_kind();
}
inline ::rrepro::Request_Kind Request::kind() const {
  // @@protoc_insertion_point(field_get:rrepro.Request.kind)
  return static_cast< ::rrepro::Request_Kind >(kind_);
}
inline void Request::set_kind(::rrepro::Request_Kind value) {
  assert(::rrepro::Request_Kind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:rrepro.Request.kind)
}

// optional .rrepro.Event event = 3;
inline bool Request::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_event() {
  if (event_ != NULL) event_->Clear();
  clear_has_event();
}
inline const ::rrepro::Event& Request::event() const {
  const ::rrepro::Event* p = event_;
  // @@protoc_insertion_point(field_get:rrepro.Request.event)
  return p != NULL ? *p : *reinterpret_cast<const ::rrepro::Event*>(
      &::rrepro::_Event_default_instance_);
}
inline ::rrepro::Event* Request::release_event() {
  // @@protoc_insertion_point(field_release:rrepro.Request.event)
  clear_has_event();
  ::rrepro::Event* temp = event_;
  event_ = NULL;
  return temp;
}
inline ::rrepro::Event* Request::mutable_event() {
  set_has_event();
  if (event_ == NULL) {
    event_ = new ::rrepro::Event;
  }
  // @@protoc_insertion_point(field_mutable:rrepro.Request.event)
  return event_;
}
inline void Request::set_allocated_event(::rrepro::Event* event) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete event_;
  }
  if (event) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      event = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
  } else {
    clear_has_event();
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:rrepro.Request.event)
}

// -------------------------------------------------------------------

// Response

// optional .rrepro.Response.Kind kind = 2 [default = BAD];
inline bool Response::has_kind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_kind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_kind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_kind() {
  kind_ = 1;
  clear_has_kind();
}
inline ::rrepro::Response_Kind Response::kind() const {
  // @@protoc_insertion_point(field_get:rrepro.Response.kind)
  return static_cast< ::rrepro::Response_Kind >(kind_);
}
inline void Response::set_kind(::rrepro::Response_Kind value) {
  assert(::rrepro::Response_Kind_IsValid(value));
  set_has_kind();
  kind_ = value;
  // @@protoc_insertion_point(field_set:rrepro.Response.kind)
}

// repeated .rrepro.Event events = 4;
inline int Response::events_size() const {
  return events_.size();
}
inline void Response::clear_events() {
  events_.Clear();
}
inline const ::rrepro::Event& Response::events(int index) const {
  // @@protoc_insertion_point(field_get:rrepro.Response.events)
  return events_.Get(index);
}
inline ::rrepro::Event* Response::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:rrepro.Response.events)
  return events_.Mutable(index);
}
inline ::rrepro::Event* Response::add_events() {
  // @@protoc_insertion_point(field_add:rrepro.Response.events)
  return events_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rrepro::Event >*
Response::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:rrepro.Response.events)
  return &events_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rrepro::Event >&
Response::events() const {
  // @@protoc_insertion_point(field_list:rrepro.Response.events)
  return events_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rrepro

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rrepro::Event_Priority> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rrepro::Event_Priority>() {
  return ::rrepro::Event_Priority_descriptor();
}
template <> struct is_proto_enum< ::rrepro::Request_Kind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rrepro::Request_Kind>() {
  return ::rrepro::Request_Kind_descriptor();
}
template <> struct is_proto_enum< ::rrepro::Response_Kind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rrepro::Response_Kind>() {
  return ::rrepro::Response_Kind_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Request_5fResponse_2eproto__INCLUDED
